0
00:00:14,049 --> 00:00:18,609
Bonjour, je m'appelle Jeremy et je suis scientifique en recherche appliquée au MILA, et aujourd'hui

1
00:00:18,609 --> 00:00:22,180
nous allons nous concentrer sur les outils d'apprentissage automatique. En passant, la date

2
00:00:22,180 --> 00:00:27,290
est le 9 septembre 2019 juste pour l'enregistrement. Regardons

3
00:00:27,290 --> 00:00:31,650
de quoi on va parler: nous allons parler de Python, nous allons parler des outils

4
00:00:31,650 --> 00:00:35,230
d'apprentissage automatique en général, de quel type d'outils vous utiliserez généralement

5
00:00:35,230 --> 00:00:38,900
dans un pipeline d'apprentissage automatique. Ensuite, nous allons nous concentrer sur quelques

6
00:00:38,900 --> 00:00:42,780
schémas d'apprentissage profond et je vais vous donner quelques conseils sur la gestion de projet

7
00:00:42,780 --> 00:00:45,790
pour lorsque vous travaillez en équipe, lorsque vous travaillez sur vos

8
00:00:45,790 --> 00:00:49,629
propres projets qui impliquent à la fois l'apprentissage automatique et l'apprentissage profond. Puis, je

9
00:00:49,629 --> 00:00:52,899
veux aussi prendre un peu de temps pour parler de matériel informatique, comme la différence entre

10
00:00:52,899 --> 00:00:57,640
un processeur et un GPU, et le type de matériel que vous trouvez généralement. Le but de

11
00:00:57,640 --> 00:01:01,620
cet exposé aujourd'hui est d'être un peu complémentaire à ce que nous avons vu jusqu'à présent.

12
00:01:01,620 --> 00:01:04,720
Gaétan a fait un très bien introduit l'apprentissage automatique et

13
00:01:04,720 --> 00:01:07,610
maintenant on va regarder de plus près les types d'outils à utiliser lorsque nous voulons

14
00:01:07,610 --> 00:01:16,119
faire de l'apprentissage automatique. Commençons d'abord avec Python. C'est une bonne chose

15
00:01:16,119 --> 00:01:19,630
que nous avons pratiqué la levée des mains et l'agitation des doigts, essayons de nous

16
00:01:19,630 --> 00:01:24,160
pratiquer encore plus: qui ici a déjà entendu parler de Python? Je parle du

17
00:01:24,160 --> 00:01:29,320
langage de programmation Python. Très bien, donc j'ai vu, je pense, plus de

18
00:01:29,320 --> 00:01:34,271
90% de la salle. Qui a déjà codé en Python avant? D'accord,

19
00:01:34,271 --> 00:01:39,600
encore une bonne partie de vous. Qui ici dirait qu'il.e est bon.ne en Python? D'accord

20
00:01:39,600 --> 00:01:43,330
très bien, il y a déjà beaucoup de connaissances sur

21
00:01:43,330 --> 00:01:46,841
Python dans cette salle. C'est bien, une partie de ceci pourrait être un rappel pour

22
00:01:46,841 --> 00:01:51,650
certains d'entre vous et une partie pourrait être complètement nouvelle. Python est un

23
00:01:51,650 --> 00:01:56,239
langage de programmation. Il a été développé en 1991, donc il est à peu près aussi vieux que moi.

24
00:01:56,239 --> 00:02:00,660
Il est source ouvert et il est particulièrement populaire en apprentissage automatique

25
00:02:00,660 --> 00:02:03,950
dans la communauté de l'apprentissage profond. Vous verrez qu'il y a beaucoup de bibliothèques qui

26
00:02:03,950 --> 00:02:08,470
sont source ouvert et utilisées tout le temps que les gens aiment vraiment. Je veux

27
00:02:08,470 --> 00:02:11,989
parler aujourd'hui de pourquoi Python est génial. Il existe de nombreuses raisons pour lesquelles Python est

28
00:02:11,989 --> 00:02:16,860
génial, mais j'ai dressé une liste pour aujourd'hui. Le premier point dont nous

29
00:02:16,860 --> 00:02:21,170
parlerons et le Zen de Python, alors continuons:

30
00:02:21,170 --> 00:02:25,910
qui ici a entendu parler du Zen de Python? vous voyez que beaucoup de gens ont entendu parler de Python,

31
00:02:25,910 --> 00:02:30,900
mais pas beaucoup ont entendu parler du Zen de Python.  Le Zen de Python est une sorte de

32
00:02:30,900 --> 00:02:37,270
philosophie si vous voulez,c'était un des premiers créateurs du langage qui a

33
00:02:37,270 --> 00:02:41,450
essentiellement dressé cette liste de ce qui était important dans un langage de programmation.

34
00:02:41,450 --> 00:02:46,500
Guido van Rossum, le créateur de Python, a une citation que dit que le code

35
00:02:46,500 --> 00:02:50,530
est lu beaucoup plus souvent qu'il n'est écrit et c'est très central dans le langage

36
00:02:50,530 --> 00:02:55,060
de programmation Python. Python a été conçu pour les utilisateurs: ce sont les humains qui

37
00:02:55,060 --> 00:03:00,160
lisent le code, n'est-ce pas? Les machines interprètent le code, mais les humains le lisent.

38
00:03:00,160 --> 00:03:05,310
Il y a ces listes d'idiomes en Python, et je veux en souligner quelques-unes.

39
00:03:05,310 --> 00:03:10,010
Je trouve les trois premières impressionnantes. "Préfère: la beauté à la laideur,

40
00:03:10,010 --> 00:03:14,460
l'explicite à l'implicite, le simple au complexe". Gardez à l'esprit

41
00:03:14,460 --> 00:03:17,310
qu'on parle de code ici, mais vous pouvez également voir comment cela pourrait

42
00:03:17,310 --> 00:03:21,890
s'appliquer à votre vie quotidienne. Un autre que je trouve aussi vraiment important:

43
00:03:21,890 --> 00:03:26,260
"Prends en compte la lisibilité". En Python, il y a ce concept que tout devrait

44
00:03:26,260 --> 00:03:30,740
être facile à lire et votre code devrait être lu comme vous lisez un roman: vous devriez

45
00:03:30,740 --> 00:03:33,430
raconter une histoire avec votre code. Alors, gardez cela à l'esprit lorsque vous lisez

46
00:03:33,430 --> 00:03:37,160
du Python. Si vous lisez votre code et qu'il ne semble pas se dérouler comme une histoire,

47
00:03:37,160 --> 00:03:42,100
il y a peut-être une meilleure façon d'écrire votre code. D'accord, c'était mon

48
00:03:42,100 --> 00:03:45,319
préféré, le Zen de Python. Une autre raison pour laquelle Python est

49
00:03:45,319 --> 00:03:51,680
génial est l'écosystème riche de bibliothèques. Python lui-même est un langage de base et

50
00:03:51,680 --> 00:03:56,120
il a beaucoup d'autres bibliothèques autour, des bibliothèques tierces que tout utilisateur peut

51
00:03:56,120 --> 00:03:59,959
utiliser pour créer leurs propres bibliothèques s'il le souhaite. En tant qu'utilisateur, vous pouvez ensuite

52
00:03:59,959 --> 00:04:05,560
aller télécharger ces bibliothèques et commencer à les utiliser immédiatement. Donc,

53
00:04:05,560 --> 00:04:08,280
une des raisons pour lesquelles nous sommes ici et que parlons de Python est qu'il existe un

54
00:04:08,280 --> 00:04:12,900
écosystème très riche de bibliothèques de calcul scientifique. L'une des plus

55
00:04:12,900 --> 00:04:17,440
populaires que je suis sûr que la plupart d'entre vous connaissent probablement est NumPy, mais

56
00:04:17,440 --> 00:04:21,720
il y a aussi SciPi qui vous permet de faire toutes sortes de calcul scientifique.

57
00:04:21,720 --> 00:04:25,380
Il y a scikit-learn qui est une bibliothèque très populaire pour l'apprentissage automatique

58
00:04:25,380 --> 00:04:28,690
et qui implémente toutes sortes d'algorithmes d'apprentissage automatique différents. Puis,

59
00:04:28,690 --> 00:04:31,080
bien sûr, nous avons les bibliothèques d'apprentissage profond que nous allons regarder

60
00:04:31,080 --> 00:04:36,000
plus tard aujourd'hui, comme TensorFlow, PyTorch et Keras. Nous allons examiner

61
00:04:36,000 --> 00:04:39,699
leurs différences et nous allons voir où ils se situent dans la

62
00:04:39,699 --> 00:04:44,800
communauté d'apprentissage en général. Il y a aussi beaucoup d'outils très riches pour

63
00:04:44,800 --> 00:04:49,960
visualiser des données: si vous traitez des données, il est très important de

64
00:04:49,960 --> 00:04:53,599
prendre du recul de temps en temps et d'essayer de regarder vos données. Essayez d'y

65
00:04:53,599 --> 00:04:57,069
donner un sens: si vous ne pouvez pas comprendre vos propres données, il sera

66
00:04:57,069 --> 00:05:00,680
probablement difficile pour un ordinateur de les comprendre. En général, une bonne règle

67
00:05:00,680 --> 00:05:03,990
de base est que, lors du début d'un projet, essayez de faire en sorte que les données vous

68
00:05:03,990 --> 00:05:09,999
parlent en tant qu'humain. Nous avons ensuite des outils d'analyse de données: donc Pandas est très

69
00:05:09,999 --> 00:05:13,580
populaire, il y en a d'autres mais je recommande vraiment d'utiliser

70
00:05:13,580 --> 00:05:17,529
Pandas: c'est vraiment utile lorsque vous traitez avec pleins de types de données structurées

71
00:05:17,529 --> 00:05:22,310
et même des données non structurées, mais surtout avec des données tabulaires comme les fichiers Excel.

72
00:05:22,310 --> 00:05:26,311
Un moyen très simple d'importer les fichiers Excel utilise Pandas et vous pouvez ensuite les

73
00:05:26,311 --> 00:05:29,539
manipuler et les retransformer dans des tableaux numpy. Nous verrons un exemple

74
00:05:29,539 --> 00:05:34,650
de cela plus tard dans la journée. Enfin, nous avons différents environnements de

75
00:05:34,650 --> 00:05:38,319
programmation. Les utilisateurs plus expérimentés de Python dans la salle savent qu'il

76
00:05:38,319 --> 00:05:42,159
existe de nombreuses façons différentes d'exécuter un programme en Python. Certains d'entre vous exécutent

77
00:05:42,159 --> 00:05:46,800
directement dans le terminal, certains d'entre vous utilisent peut-être IPython, certains d'entre vous êtes

78
00:05:46,800 --> 00:05:50,830
peut-être plus familiers et plus à l'aise avec les calepins Jupyter. En particulier, durant

79
00:05:50,830 --> 00:05:54,330
cette semaine, nous allons utiliser Google Colab qui héberge des

80
00:05:54,330 --> 00:05:58,029
calepins Jupyter. Encore une fois je là-dessus un peu plus en détail plus tard durant cette

81
00:05:58,029 --> 00:06:02,419
conférence. Enfin, vous voyez qu'il existe de nombreuses bibliothèques différentes, il est vraiment

82
00:06:02,419 --> 00:06:05,879
important de gérer vos bibliothèques correctement. Il y a des outils différents

83
00:06:05,879 --> 00:06:09,119
qui vous permettent de gérer vos bibliothèques et vos versions de bibliothèques.

84
00:06:09,119 --> 00:06:11,819
Nous allons examiner ces différents outils et comment vous pouvez les utiliser plus

85
00:06:11,819 --> 00:06:18,580
tard tout au long de l'exposé. Ce qui est sympa avec python, c'est que c'est

86
00:06:18,580 --> 00:06:22,460
très facile de démarrer avec les calepins interactifs. Parlons donc un

87
00:06:22,460 --> 00:06:28,550
peu de ce que sont les calepins interactifs. Un calepin interactif est donc un moyen

88
00:06:28,550 --> 00:06:33,029
d'afficher votre code Python dans des cellules, puis

89
00:06:33,029 --> 00:06:37,559
d'afficher les résultats en ligne. Voici un exemple de ce à quoi ça ressemble généralement.

90
00:06:37,559 --> 00:06:42,969
Un calepin interactif très populaire qui utilise Python est le

91
00:06:42,969 --> 00:06:47,089
calepin Jupyter. Vous allez donc vous familiariser de plus en plus avec les calepins Jupyter et

92
00:06:47,089 --> 00:06:50,300
comment ils fonctionnent, mais ce qui les rend vraiment utiles, c'est que vous pouvez avoir ces

93
00:06:50,300 --> 00:06:52,759
cellules séquentielles et que vous pouvez décider d'exécuter votre code à

94
00:06:52,759 --> 00:06:56,930
différents intervalles et directement en ligne, puis avoir vos résultats et qu'ils soient

95
00:06:56,930 --> 00:07:01,219
interactif. Vous voyez donc ici quelques exemples dans ces images: vous pouvez obtenir des

96
00:07:01,219 --> 00:07:04,779
graphiques vraiment riches, vous pouvez même avoir  de l'interaction avec ces graphiques.

97
00:07:04,779 --> 00:07:08,550
Ce qui est encore plus utile, c'est que vous pouvez les partager avec des collègues

98
00:07:08,550 --> 00:07:13,039
relativement facilement et c'est assez facile après que vous les avez partagés qu'un

99
00:07:13,039 --> 00:07:18,460
de vos collègues les exécute et soit capable de raconter votre histoire à travers les données.

100
00:07:18,460 --> 00:07:21,550
Donc, ce que nous allons utiliser tout au long de cette semaine et dans les tutoriels plus tard

101
00:07:21,550 --> 00:07:27,840
dans la journée, c'est ce que nous appelons Google Colab.  Un moyen rapide de

102
00:07:27,840 --> 00:07:31,899
comprendre Google Colab, c'est un peu comme des feuilles de calcul Google ou des documents

103
00:07:31,899 --> 00:07:36,360
Google dans la façon que vous pouvez interagir avec de nombreux utilisateurs à la fois. En réalité,

104
00:07:36,360 --> 00:07:41,909
Colab exécute des calepins Jupyter sous le capot. Donc, la raison pour laquelle nous utilisons Google

105
00:07:41,909 --> 00:07:46,069
Colab est qu'il exécute directement dans votre navigateur et toute la computation se déroule dans

106
00:07:46,069 --> 00:07:50,389
le nuage et il n'y a pratiquement aucune configuration requise de votre côté. Alors, pour ceux d'entre vous

107
00:07:50,389 --> 00:07:53,839
qui connaissent les calepins Jupyter, vous pouvez toujours utiliser leurs calepins,

108
00:07:53,839 --> 00:07:57,409
mais si nous devions configurer les calepins Jupyter pour tout le monde, il aurait fallu

109
00:07:57,409 --> 00:08:01,539
un tutoriel complet dédié au démarrage. En ce moment, Google

110
00:08:01,539 --> 00:08:05,529
Colab est, d'une manière, piles incluses. Ce qui est vraiment bien aussi, c'est

111
00:08:05,529 --> 00:08:09,409
l'accès gratuit à un GPU: vous pouvez donc faire vos calculs sur un GPU

112
00:08:09,409 --> 00:08:12,330
et vous n'avez pas à utiliser les ressources de votre propre ordinateur.

113
00:08:12,330 --> 00:08:16,169
Donc ça ne ralentit pas votre ordinateur lorsque vous exécutez du code. Ça nous sera utile

114
00:08:16,169 --> 00:08:22,210
pour les tutoriels plus tard dans la journée. Lorsque vous exécutez un programme dans Colab, c'est

115
00:08:22,210 --> 00:08:25,129
littéralement aussi simple qu'écrire ce que vous voulez faire.

116
00:08:25,129 --> 00:08:29,099
Le programme typique avec lequel on commence est juste un 'Hello World': vous tapez

117
00:08:29,099 --> 00:08:31,960
'print("Hello World")' dans l'une des cellules. Vous verrez à côté de chaque

118
00:08:31,960 --> 00:08:35,350
cellule que vous pouvez exécuter le code: il y a un petit bouton de lecture, vous cliquez

119
00:08:35,350 --> 00:08:37,560
sur ce bouton de lecture, puis il retourne 'Hello World'.

