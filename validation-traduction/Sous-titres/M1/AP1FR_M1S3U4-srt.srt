0
00:00:14,030 --> 00:00:16,770
Maintenant que nous avons examiné les frameworks d'apprentissage profond, parlons un peu

1
00:00:16,770 --> 00:00:24,290
de gestion de projet, et ici je veux dire gestion des

2
00:00:24,290 --> 00:00:28,610
projets d' apprentissage profond, mais cela s'applique également aux projets d'apprentissage automatique. Vous allez voir

3
00:00:28,610 --> 00:00:32,070
cette semaine qu'on va utiliser beaucoup de calepins Colab et Jupyter et bien

4
00:00:32,070 --> 00:00:36,010
que ce soient d'excellents outils pour itérer rapidement, ce ne sont pas nécessairement les

5
00:00:36,010 --> 00:00:40,230
meilleurs outils pour mettre à l'échelle et déployer de grands projets. Vous verrez très rapidement

6
00:00:40,230 --> 00:00:44,560
pourquoi une fois que vous commencez à l'utiliser. Nous pouvons parler hors ligne pendant longtemps

7
00:00:44,560 --> 00:00:48,129
de pourquoi ce ne serait pas une bonne idée d'utiliser des calepins Jupyter en

8
00:00:48,129 --> 00:00:52,219
production, mais l'idée est que les choses deviennent encombrées et

9
00:00:52,219 --> 00:00:55,969
désorganisées très rapidement. Je veux donc vous donner maintenant un tas de

10
00:00:55,969 --> 00:01:00,210
conseils différents sur la façon de gérer un projet, en particulier un projet d'apprentissage profond

11
00:01:00,210 --> 00:01:03,829
et d'apprentissage automatique. Le premier point dont je veux parler est le

12
00:01:03,829 --> 00:01:09,000
maintien d'une base de code organisée. C'est vraiment important. Lorsque vous

13
00:01:09,000 --> 00:01:12,090
travaillez sur du code, vous allez travailler sur du code avec d'autres personnes et vous

14
00:01:12,090 --> 00:01:15,500
voulez qu'il soit facile pour quelqu'un d'autre de participer à ce projet

15
00:01:15,500 --> 00:01:20,100
et de se retrouver. Voici un exemple d'une structure d'arbre qui

16
00:01:20,100 --> 00:01:23,390
revient souvent: vous pourriez avoir un dossier avec des modèles et un dossier

17
00:01:23,390 --> 00:01:29,850
avec des données, un dossier avec des résultats que vous pouvez ignorer, un dossier utilitaire. Vous

18
00:01:29,850 --> 00:01:33,770
voulez que votre code soit organisé de manière hiérarchique,

19
00:01:33,770 --> 00:01:38,610
vous voulez qu'il soit facile de trouver différents modules, différentes fonctions, etc. Vous

20
00:01:38,610 --> 00:01:43,570
voulez également utiliser des noms logiques pour les variables, les noms de fichiers, les dossiers: évitez d'utiliser

21
00:01:43,570 --> 00:01:48,479
des noms de variables qui n'ont aucun sens, en particulier dans votre code.

22
00:01:48,479 --> 00:01:52,659
Python est construit autour de l'idée que la lisibilité importe, donc si vous utilisez une variable,

23
00:01:52,659 --> 00:01:56,299
par exemple pour régler le pas d'apprentissage de votre modèle, appelez simplement

24
00:01:56,299 --> 00:01:59,960
cette variable "pas d'apprentissage''. Ne l'appelez pas  "A" ou quelque chose qui

25
00:01:59,960 --> 00:02:02,659
n'a rien à voir avec le taux d'apprentissage. De cette façon, lorsque quelqu'un utilise votre

26
00:02:02,659 --> 00:02:07,030
code, vous pouvez réellement interpréter cette variable pour signifier ce qu'elle signifie vraiment.

27
00:02:07,030 --> 00:02:09,280
Un autre point vraiment important est d'éviter

28
00:02:09,280 --> 00:02:12,770
la duplication de code. C'est l'une des raisons pour lesquelles je pense que les

29
00:02:12,770 --> 00:02:17,870
calepins Jupyter peuvent parfois être une mauvaise idée: il est très facile de dupliquer du code dans les

30
00:02:17,870 --> 00:02:22,230
calepins Jupyter, surtout parce qu'il est parfois plus rapide de dupliquer votre code. Par contre,

31
00:02:22,230 --> 00:02:24,530
vous verrez que si vous trouvez un bogue dans une

32
00:02:24,530 --> 00:02:28,230
routine d' entraînement par exemple, soudainement il faut faire dix changements au lieu

33
00:02:28,230 --> 00:02:31,950
de la seule fois où vous avez trouvé ce bogue. Il pourrait être très facile d'oublier une

34
00:02:31,950 --> 00:02:35,700
fois où vous avez mentionné cette routine de codage, cette routine d'entraînement ou de

35
00:02:35,700 --> 00:02:39,510
chargement de données et soudainement, il y a un bogue dans votre code et vous n'y avez pas

36
00:02:39,510 --> 00:02:43,340
fait attention. Si vous modularisez votre code et que vous enveloppez tout dans les fonctions

37
00:02:43,340 --> 00:02:48,670
et que vous évitez la duplication de code,ça évite que cela se produise. Une autre chose

38
00:02:48,670 --> 00:02:52,569
est que Python est un langage de programmation orienté objet. Nous n'allons pas

39
00:02:52,569 --> 00:02:56,500
entrer dans trop de détails sur ce qu'est la programmation orientée objet, mais je vous recommande

40
00:02:56,500 --> 00:02:59,540
d'aller en lire plus à ce sujet si vous n'êtes pas trop familier avec

41
00:02:59,540 --> 00:03:04,390
et d'utiliser ces paradigmes. Python a vraiment été construit autour de ça, alors utilisez-le

42
00:03:04,390 --> 00:03:10,349
à son plein potentiel. Je recommanderais également de suivre les directives

43
00:03:10,349 --> 00:03:16,830
PEP: ce sont des Protocoles d'Amélioration de Python, ce sont des suggestions que

44
00:03:16,830 --> 00:03:21,930
les créateurs et modérateurs Python donnent au public et ils disent généralement comment

45
00:03:21,930 --> 00:03:27,080
et comment ne pas faire les choses avec le code Python. Cela pourrait être, par exemple, comment utiliser

46
00:03:27,080 --> 00:03:32,599
"lint" sur votre code, comment avoir du code plus "pythonique". En Python, vous pouvez avoir du

47
00:03:32,599 --> 00:03:35,841
code écrit de différentes manières et le code continuera de fonctionner, mais il

48
00:03:35,841 --> 00:03:39,410
y a des choses comme: avez-vous mis trop d'espaces blancs dans votre code?

49
00:03:39,410 --> 00:03:43,110
Avez-vous mis trop d'espaces avant la dernière virgule? Votre ligne est-elle trop longue?

50
00:03:43,110 --> 00:03:46,840
Il y a certaines règles auxquelles vous pouvez adhérer et cela rend tout le monde

51
00:03:46,840 --> 00:03:50,540
heureux quand tout le monde suit ces règles, car si vous écrivez votre propre

52
00:03:50,540 --> 00:03:54,239
code, je suppose que ça va, mais la deuxième personne vient et regarde votre

53
00:03:54,239 --> 00:03:59,810
code en désordre, c'est les rend juste vraiment malheureux. Finalement, documentez votre code.

54
00:03:59,810 --> 00:04:05,550
Je me souviens d'avoir entendu une fois quelqu'un dire que seules les autres personnes écrivent du mauvais

55
00:04:05,550 --> 00:04:08,709
code. Rappelez-vous de ceci: vous pensez toujours que

56
00:04:08,709 --> 00:04:11,920
le code de quelqu'un d'autre est mauvais et que votre code est le meilleur,

57
00:04:11,920 --> 00:04:14,840
mais nous avons tous nos propres styles d'écriture et vous pouvez

58
00:04:14,840 --> 00:04:18,090
comprendre le vôtre intrinsèquement parce que votre cerveau l'a inventé.

59
00:04:18,090 --> 00:04:21,260
Si vous lisez le code de quelqu'un d'autre, vous lisez leur façon de penser et

60
00:04:21,260 --> 00:04:24,810
cela peut être contre-intuitif pour vous, ce qui rend la documentation de votre code

61
00:04:24,810 --> 00:04:28,690
très importante. C'est aussi important pour l'avenir: chaque fois que vous lisez ce code

62
00:04:28,690 --> 00:04:32,230
d'il y a quelques années, votre style de programmation peut avoir évolué. Vous pensez peut-être:

63
00:04:32,230 --> 00:04:35,760
"à quoi pensais-je avec cette décision de conception?" Eh bien, vous avez de la

64
00:04:35,760 --> 00:04:41,370
documentation pour y revenir et vous y référer.

65
00:04:41,370 --> 00:04:45,800
Une autre chose dont je veux parler est le contrôle de version, alors encore une fois

66
00:04:45,800 --> 00:04:49,270
levons la main, assurons-nous que tout le monde ne dort pas, qui ici a entendu parler

67
00:04:49,270 --> 00:04:56,270
de Git? D'accord, beaucoup de mains. Qui ici utilise git régulièrement? D'accord, encore beaucoup. Nous allons

68
00:04:56,270 --> 00:05:00,720
parler de "versionner" votre code avec Git. Pour ceux d'entre vous qui ne

69
00:05:00,720 --> 00:05:05,291
connaissent pas les systèmes de contrôle de version, Git est un système de contrôle de version: c'est un outil qui

70
00:05:05,291 --> 00:05:08,870
vous permet de garder un historique de tous les changements qui se produisent dans votre

71
00:05:08,870 --> 00:05:12,830
projet. Pourquoi avons-nous besoin de cela et qu'est-ce que cela signifie? Peut-être

72
00:05:12,830 --> 00:05:15,990
que vous vous êtes déjà retrouvé dans cette situation, où vous avez un

73
00:05:15,990 --> 00:05:19,039
projet où vous n'utilisez pas Github. Vous collaborez, peut-être que c'était

74
00:05:19,039 --> 00:05:23,090
un Dossier Dropbox, et tout d'un coup, il y a des duplications où vous avez

75
00:05:23,090 --> 00:05:27,120
experiment_1 et puis vous avez peur de perdre quelque chose, alors

76
00:05:27,120 --> 00:05:29,840
vous changez de quoi, mais enregistrez l'ancienne version au cas où

77
00:05:29,840 --> 00:05:34,350
vous voudriez vous y référer. Maintenant, vous avez experiment_1_old, puis je viens

78
00:05:34,350 --> 00:05:38,110
faire une experiment_2, mais quelqu'un l'améliore et puis il y a la

79
00:05:38,110 --> 00:05:42,310
version Jeremy, mais aussi la version pas_Jeremy parce que nous collaborons

80
00:05:42,310 --> 00:05:45,940
et ça explose rapidement et se développe rapidement de façon incontrôlée. C'est exactement ce que

81
00:05:45,940 --> 00:05:51,419
Git en général vous permet d'éviter. Voici quelques hébergements populaires pour

82
00:05:51,419 --> 00:05:56,650
Git, vous avez donc GitHub, GitLab et la façon que ça fonctionne est qu'il y a un paradigme de

83
00:05:56,650 --> 00:06:01,810
branches. Essentiellement, tout le monde a sa propre copie du code qui vit localement.

84
00:06:01,810 --> 00:06:06,090
Vous êtes tous d'accord avec une sorte de serveur à distance qui contient la vérité sur votre

85
00:06:06,090 --> 00:06:10,190
projet. Généralement, il y a une personne impliquée qui peut alors décider si le

86
00:06:10,190 --> 00:06:14,960
code que vous avez écrit peut aller dans la base de code de tout le monde et de la manière que c'est

87
00:06:14,960 --> 00:06:18,849
conçu, il est presque impossible de perdre n'importe quel type

88
00:06:18,849 --> 00:06:22,800
de code que vous avez écrit. Tant que vous utilisez l'outil correctement, il n'y a

89
00:06:22,800 --> 00:06:25,949
presque rien qui puisse mal tourner et le code est distribué à tous

90
00:06:25,949 --> 00:06:29,880
vos pairs. Il est donc très difficile de gâcher quelque chose et encore une fois vous avez

91
00:06:29,880 --> 00:06:33,550
ce concept de branches: vous pouvez travailler sur un projet ensemble, je commencerai à

92
00:06:33,550 --> 00:06:38,610
ce point-ci, puis une personne va de l'avant et écrit peut-être un patch de code, le

93
00:06:38,610 --> 00:06:43,130
soumet, quelqu'un peut le réviser, l'accepter et Git en général

94
00:06:43,130 --> 00:06:46,660
gère tout cela pour vous, donc si vous arrivez à ce point-ci dans un

95
00:06:46,660 --> 00:06:50,380
projet, supposons que vous êtes quelques part le long de cet axe de temps, peut-être

96
00:06:50,380 --> 00:06:52,699
que vous êtes quelque part ici dans votre projet, cet

97
00:06:52,699 --> 00:06:56,759
historique complet vit avec le projet. Chaque fois que vous obtenez une copie du projet,

98
00:06:56,759 --> 00:07:00,690
vous obtenez également une copie de toutes les modifications qui ont déjà été apportées à ce code.

99
00:07:00,690 --> 00:07:04,230
Vous obtenez également tous les auteurs qui ont déjà participé, donc cela est très

100
00:07:04,230 --> 00:07:07,860
utile: par exemple, si vous avez une base de code et tout à coup, quelque chose

101
00:07:07,860 --> 00:07:12,270
brise et que c'est une ligne en particulier et vous vous demandez: "qui a écrit cette ligne?",

102
00:07:12,270 --> 00:07:17,639
il y a une fonction appelée "Git blame". Vous la tapez et elle vous dit exactement qui a

103
00:07:17,639 --> 00:07:20,889
écrit cette ligne. C'est encore plus drôle quand vous maudissez cette personne,

104
00:07:20,889 --> 00:07:25,140
mais il s'avère que c'est vous qui avez écrit cette ligne. Alors Git est un outil très

105
00:07:25,140 --> 00:07:29,110
puissant. Je vous recommande vraiment de commencer à l'utiliser si ce n'est pas déjà fait.

106
00:07:29,110 --> 00:07:33,910
Une fois que vous commencerez à l'utiliser, vous vous demanderez comment vous avez pu vivre sans.

107
00:07:33,910 --> 00:07:38,800
Le prochain point que nous allons aborder est celui des environnements virtuels.

108
00:07:38,800 --> 00:07:43,430
Refaisons le truc de la main, c'est amusant. Qui utilise des environnements virtuels? D'accord,

109
00:07:43,430 --> 00:07:48,790
nous avons encore une bonne quantité de mains. Les environnements virtuels sont une fonctionnalité vraiment

110
00:07:48,790 --> 00:07:53,610
utile, principalement parce que comme nous l'avons vu jusqu'à présent, Python est un écosystème riche

111
00:07:53,610 --> 00:07:57,699
de bibliothèques. Vous avez donc beaucoup de bibliothèques différentes partout

112
00:07:57,699 --> 00:08:01,259
et ce sont des bibliothèques tierces. Il n'y a donc personne qui réglemente vraiment la

113
00:08:01,259 --> 00:08:06,300
façon dont ces bibliothèques sont mises à jour et généralement ce sont des bénévoles qui donnent de

114
00:08:06,300 --> 00:08:09,350
leur temps à ces bibliothèques et qui apportent des changements à ces

115
00:08:09,350 --> 00:08:12,990
bibliothèques en fonction de ce qu'ils pensent être le mieux. Il se peut donc que d'une

116
00:08:12,990 --> 00:08:16,020
version à l'autre, ce code qui fonctionnait avec une version de la bibliothèque se

117
00:08:16,020 --> 00:08:19,770
casse soudainement sur une nouvelle bibliothèque. Peut-être l'ordre dans lequel vous mettiez

118
00:08:19,770 --> 00:08:23,629
les entrées ont changé, peut-être que quelque chose a complètement changé et tout d'un

119
00:08:23,629 --> 00:08:27,139
coup, un projet sur lequel vous travailliez il y a trois ans n'est plus

120
00:08:27,139 --> 00:08:31,330
compatible avec la nouvelle version de la bibliothèque aujourd'hui.

121
00:08:31,330 --> 00:08:35,510
Les environnements virtuels vous permettent en quelque sorte d'éviter cela autant que possible.

122
00:08:35,510 --> 00:08:39,810
Ce qu'ils font, c'est isoler chaque projet avec son propre ensemble de versions de chaque bibliothèque.

123
00:08:39,810 --> 00:08:43,380
Si vous voulez mettre à jour une bibliothèque, vous la mettez à jour pour un

124
00:08:43,380 --> 00:08:47,150
projet particulier, mais pour un autre projet sur lequel vous avez travaillé il y a longtemps,

125
00:08:47,150 --> 00:08:51,410
cette bibliothèque reste figée dans le temps. Vous avez même une recette pour revenir exactement à

126
00:08:51,410 --> 00:08:55,590
l'état de ce projet quand il fonctionnait correctement. Si vous déployez quelque chose en

127
00:08:55,590 --> 00:08:58,660
production par exemple, vous pouvez toujours vous assurer que les versions

128
00:08:58,660 --> 00:09:02,820
de votre bibliothèque sont exactement là où elles doivent être. C'est très très utile et ça vous

129
00:09:02,820 --> 00:09:06,110
fera gagner beaucoup de temps: il n'y a rien de pire que de devoir rétrograder des

130
00:09:06,110 --> 00:09:08,080
bibliothèques et que ça casse un autre projet

131
00:09:08,080 --> 00:09:10,490
parce que vous essayiez de faire fonctionner un projet,

132
00:09:10,490 --> 00:09:14,930
et que les choses commencent soudainement à briser partout. Je recommande Conda; il existe différents

133
00:09:14,930 --> 00:09:19,081
outils, Conda est probablement l'un des plus faciles à démarrer. Il

134
00:09:19,081 --> 00:09:23,190
vous permet de gérer ces bibliothèques et vous pouvez utiliser PIP avec Conda. Nous n'allons

135
00:09:23,190 --> 00:09:27,140
pas approfondir la différence entre Conda et PIP, mais

136
00:09:27,140 --> 00:09:32,270
Conda est vraiment un gestionnaire d'environnement virtuel. Vous avez également différentes

137
00:09:32,270 --> 00:09:35,700
alternatives comme virtualenv, pipenv: différentes saveurs pour

138
00:09:35,700 --> 00:09:43,070
différentes personnes. Utilisez au moins quelque chose pour gérer vos environnements virtuels.

139
00:09:43,070 --> 00:09:49,190
Le dernier point dont je veux parler est d'utiliser des tests unitaires. Les tests unitaires sont

140
00:09:49,190 --> 00:09:53,160
très importants. C'est toujours une bonne pratique d'avoir des tests unitaires. Les tests unitaires

141
00:09:53,160 --> 00:09:56,450
sont comme une ceinture de sécurité: on n'a jamais vraiment besoin d'une ceinture

142
00:09:56,450 --> 00:10:00,750
avant d'en avoir vraiment besoin: on n'a jamais besoin de tests unitaires avant d'en avoir vraiment besoin.

143
00:10:00,750 --> 00:10:05,211
Les tests unitaires sont là, vous les mettez en place pour vous assurer que lorsque vous poussez du code, il

144
00:10:05,211 --> 00:10:08,620
ne casse pas le reste de votre code: vous devez créer vos propres

145
00:10:08,620 --> 00:10:11,830
tests unitaires pour vous assurer qu'ils reflètent votre projet, mais l'idée est

146
00:10:11,830 --> 00:10:16,690
que si vous mettez en place un ensemble de tests unitaires bien définis, il sera très très difficile de

147
00:10:16,690 --> 00:10:20,500
pousser un changement en production qui fera quelque chose de catastrophique. Il y a toujours

148
00:10:20,500 --> 00:10:23,380
des choses auxquelles on ne pense pas nécessairement quand on téléverse

149
00:10:23,380 --> 00:10:26,680
du code: ça pourrait être aussi simple que de supprimer accidentellement une

150
00:10:26,680 --> 00:10:30,590
ligne de code et ça peut passer sous le radar lorsque vous faites une révision de code.

151
00:10:30,590 --> 00:10:33,540
Vous poussez cela en production et tout d'un coup votre

152
00:10:33,540 --> 00:10:37,910
projet échoue. Il existe en fait des moyens de mettre en place des tests unitaires et de faire en sorte

153
00:10:37,910 --> 00:10:42,080
qu'il soit impossible de pousser du code sans que tous les tests

154
00:10:42,080 --> 00:10:46,260
unitaires soient réussis. Je recommande vraiment d'ajouter des tests unitaires à votre code: il y a un

155
00:10:46,260 --> 00:10:50,520
tas de bibliothèques différentes pour faire des tests unitaires avec Python, et PyTest

156
00:10:50,520 --> 00:10:56,820
est l'un d'entre eux que je pourrais recommander. Parlons maintenant de

157
00:10:56,820 --> 00:11:01,362
la gestion des expériences. Gaétan a mentionné plus tôt qu'il peut

158
00:11:01,362 --> 00:11:05,210
y avoir de nombreux hyperparamètres différents pour une expérience, pleins d'expériences

159
00:11:05,210 --> 00:11:08,441
que vous souhaitez exécuter et différents modèles que vous souhaitez tester.

160
00:11:08,441 --> 00:11:13,740
C'est parce que l'apprentissage profond est intrinsèquement empirique: il est vraiment

161
00:11:13,740 --> 00:11:17,100
difficile de savoir quels paramètres auront quel effet sur le modèle autre que

162
00:11:17,100 --> 00:11:19,790
de l'essayer. Parfois, les expériences peuvent prendre des

163
00:11:19,790 --> 00:11:24,380
jours, des heures, des semaines, des mois: cela dépend vraiment du type de modèles, mais leur

164
00:11:24,380 --> 00:11:28,400
exécution pourrait prendre très longtemps. ce que vous voulez donc éviter est d'avoir à

165
00:11:28,400 --> 00:11:32,010
exécuter plusieurs des expériences encore et encore. Pour ce faire, vous

166
00:11:32,010 --> 00:11:36,390
organisez généralement vos expériences et vous voulez pouvoir les enregistrer de manière

167
00:11:36,390 --> 00:11:40,580
structurée. Vous avez donc différents outils pour consigner et visualiser les expériences.

168
00:11:40,580 --> 00:11:45,080
Ici, nous avons un exemple de MLflow dont Gaétan a parlé brièvement

169
00:11:45,080 --> 00:11:49,120
plus tôt. Ce qui est vraiment bien avec MLflow, c'est que vous pouvez mettre tous les différents

170
00:11:49,120 --> 00:11:52,110
paramètres utilisés pour une certaine expérience et quand vous remontez

171
00:11:52,110 --> 00:11:55,390
dans le temps regarder vos différentes métriques, vous pouvez dire: Oh, quel

172
00:11:55,390 --> 00:11:58,570
était le modèle le plus performant? Quels étaient les paramètres utilisés

173
00:11:58,570 --> 00:12:02,650
lors de l’exécution de cette expérience il y a trois mois? Vous pouvez même regarder la

174
00:12:02,650 --> 00:12:07,300
version du code que vous utilisiez: il prendra un identifiant unique, le

175
00:12:07,300 --> 00:12:11,920
SHA de votre branche Git, c'est un petit détail, mais cela vous permet de savoir

176
00:12:11,920 --> 00:12:14,990
exactement quelle version du code vous exécutiez lors de cette

177
00:12:14,990 --> 00:12:19,030
expérience. Cela fait partie du concept de reproductibilité que

178
00:12:19,030 --> 00:12:22,240
Gaétan mentionnait plus tôt: vous voulez reproduire vos expériences plus tard

179
00:12:22,240 --> 00:12:26,820
sans avoir à relancer ces expériences coûteuses. Un autre outil ici que nous

180
00:12:26,820 --> 00:12:30,720
voyons est Tensorboard: Tensorboard est également utile parce qu'il vous permet de

181
00:12:30,720 --> 00:12:36,040
visualiser vos expériences de manière dynamique: lorsque vous lancez un modèle, vous pouvez voir

182
00:12:36,040 --> 00:12:38,990
ces différentes courbes d'apprentissage et vous avez différentes mesures.

183
00:12:38,990 --> 00:12:42,910
Vous pouvez avoir la précision, mais aussi la perte et toutes sortes de mesures différentes que

184
00:12:42,910 --> 00:12:47,070
vous pourriez trouver utiles. Vous pouvez les visualiser en temps réel: c'est pratique,

185
00:12:47,070 --> 00:12:51,240
car vous pourriez avoir quatre expériences où la perte suit une certaine tendance et soudainement,

186
00:12:51,240 --> 00:12:54,420
vous changez quelque chose, vous lancez votre expérience et vous voyez

187
00:12:54,420 --> 00:12:58,730
que votre précision n'augmente jamais. Alors, si votre expérience prend des semaines, mais

188
00:12:58,730 --> 00:13:02,480
qu'après quelques heures, vous remarquez que votre précision n'a pas bougé alors qu'elle

189
00:13:02,480 --> 00:13:06,110
se déplacerait relativement plus rapidement sur d'autres expériences, alors

190
00:13:06,110 --> 00:13:09,720
vous pouvez décider de tuer cette expérience relativement rapidement juste en regardant.

191
00:13:09,720 --> 00:13:15,930
Vous avez aussi des outils qui vous permettent de faire de

192
00:13:15,930 --> 00:13:21,000
l'optimisation hyperparamétrique. L'un de ces outils est Orion qui a également été développé

193
00:13:21,000 --> 00:13:28,700
au Mila et cela vous permet de modifier certains paramètres d'une manière automatisée. Tout au long de

194
00:13:28,700 --> 00:13:30,880
cette semaine, nous allons regarder les différents

195
00:13:30,880 --> 00:13:33,810
paramètres qui peuvent affecter le réseau, mais il y aura des

196
00:13:33,810 --> 00:13:38,200
hyperparamètres que vous ne pouvez régler que d'une seule façon pour savoir s'ils

197
00:13:38,200 --> 00:13:41,650
fonctionnent bien ou non, est c'est de les essayer. Vous aurez donc ces frameworks qui

198
00:13:41,650 --> 00:13:45,231
vous permettent de faire de l'optimisation hyperparamétrique automatique.

199
00:13:45,231 --> 00:13:49,830
Vous dites: voici l'espace de recherche que je voudrais considérer, s'il vous plaît,

200
00:13:49,830 --> 00:13:53,090
trouvez-moi les meilleurs paramètres pour mon réseau. Vous spécifiez donc tous

201
00:13:53,090 --> 00:13:58,040
vos hyperparamètres et cet optimiseur d'hyperparamètre a été construit pour

202
00:13:58,040 --> 00:14:02,370
trouver les meilleurs valeurs en exécutant le moins d'expériences possible statistiquement.

203
00:14:02,370 --> 00:14:07,620
Regardons ici une liste de différents outils qui vous permettent de faire

204
00:14:07,620 --> 00:14:12,230
ce dont je viens de parler. Comme vous pouvez le voir, il y a beaucoup de saveurs différentes

205
00:14:12,230 --> 00:14:16,440
pour différentes personnes. Un outil que j'aime présentement est MLflow parce qu'il est

206
00:14:16,440 --> 00:14:19,660
source ouverte et qu'il vous permet de faire beaucoup de ces différentes choses,

207
00:14:19,660 --> 00:14:23,350
y compris la surveillance et l'organisation d'expériences. La seule chose qu'il ne

208
00:14:23,350 --> 00:14:26,930
vous permet pas de faire est l'optimisation hyperparamétrique, mais

209
00:14:26,930 --> 00:14:32,170
Orion vous permet de le faire et ils peuvent en fait bien fonctionner ensemble. Vous

210
00:14:32,170 --> 00:14:36,070
pouvez donc parcourir cette liste plus tard; différents services vous offriront

211
00:14:36,070 --> 00:14:37,990
des avantages différents.
