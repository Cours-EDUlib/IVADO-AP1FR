1
00:00:13,340 --> 00:00:18,180
Maintenant, je veux faire un petit détour et je veux parler un peu

2
00:00:18,180 --> 00:00:23,490
plus des représentations d'images. Juste pour avoir une idée et peut-être juste pour

3
00:00:23,490 --> 00:00:27,720
vous faire bouger un peu, qui ici est à l'aise avec les images et la

4
00:00:27,720 --> 00:00:32,460
programmation? Qui a déjà fait du traitement d'image avant? D'accord, nous avons donc

5
00:00:32,460 --> 00:00:36,059
environ un quart de la foule, donc c'est bien parce que si vous n'avez jamais traité

6
00:00:36,059 --> 00:00:39,870
dimages auparavant, vous ne savez peut-être même pas comment représenter une image sur un

7
00:00:39,870 --> 00:00:42,900
ordinateur. C'est donc ce que cette section va couvrir, comment

8
00:00:42,900 --> 00:00:46,769
représenter une image sur un ordinateur. Puis vous comprendrez

9
00:00:46,769 --> 00:00:52,140
où cela s'inscrit dans le contexte des réseaux de neurones convolutifs.

10
00:00:52,140 --> 00:00:57,540
Commençons par une représentation d'image: nous disons généralement quune

11
00:00:57,540 --> 00:01:02,670
lmage est un tableau de pixels, donc pour l'ordinateur, lorsque nous prenons une image et que nous la

12
00:01:02,670 --> 00:01:06,690
téléchargeons sur l'ordinateur, nous représentons vraiment cela comme une matrice de nombres.

13
00:01:06,690 --> 00:01:11,030
La matrice de nombres peut être représentée de différentes manières, mais

14
00:01:11,030 --> 00:01:16,230
généralement si nous avons par exemple une image en niveaux de gris - « 'image en

15
00:01:16,230 --> 00:01:21,120
niveaux de gris » signifie une image en noir et blanc - ce que nous faisons est que nous faisons varier

16
00:01:21,120 --> 00:01:24,810
lintensité de la noirceur ou de la blancheur d'un pixel. Vous pouvez vraiment penser à

17
00:01:24,810 --> 00:01:28,830
cela comme une ampoule: les pixels de votre écran sont des ampoules et vous décidez

18
00:01:28,830 --> 00:01:33,120
combien vous allumez ou éteignez. S'il est à zéro, il est complètement éteint, ce qui

19
00:01:33,120 --> 00:01:38,010
représente un noir et s'il est à 255, il est complètement allumé, ce qui représente le

20
00:01:38,010 --> 00:01:41,280
Blanc. Partout entre les deux, vous pouvez obtenir ces différentes nuances de gris et

21
00:01:41,280 --> 00:01:45,960
en variant cette quantité de gris, vous pouvez alors obtenir une image en niveaux de gris ou une image en

22
00:01:45,960 --> 00:01:51,330
noir et blanc. Généralement, lorsque nous avons une grille de pixels ou une matrice,

23
00:01:51,330 --> 00:01:56,610
nous référons à cela comme un canal, donc encore une fois une image en niveaux de gris a un seul

24
00:01:56,610 --> 00:02:01,710
Canal. Ici nous avons un exemple, donc nous avons un chiffre ici, le chiffre 8, qui

25
00:02:01,710 --> 00:02:08,549
est représenté par une grille de 28 par 28 nous avons donc 28 par 28 pixels pour un total de 784

26
00:02:08,549 --> 00:02:12,540
Pixels. Vous pouvez voir sur cette image que c'est ainsi que nous représentons

27
00:02:12,540 --> 00:02:17,340
notre image: principalement noire partout, donc zéro presque partout, et au

28
00:02:17,340 --> 00:02:21,540
centre où nous avons des points plus clairs, nous aurons des valeurs généralement

29
00:02:21,540 --> 00:02:24,680
plus proches de la plage 200, donc vous pouvez voir ici que nous avons les

30
00:02:24,680 --> 00:02:30,650
valeurs 221 249 et cela est pris en charge par l'ordinateur.

31
00:02:30,650 --> 00:02:34,310
Lorsque vous cliquez sur l'image, c'est ce qui est montré: c'est

32
00:02:34,310 --> 00:02:37,819
l'ordinateur qui dit aux pixels comment s'allumer, mais c'est ce que nous

33
00:02:37,819 --> 00:02:41,420
donnons aux réseaux de neurones convolutifs dans le contexte des images, c'est ainsi qu'il

34
00:02:41,420 --> 00:02:45,650
interprète ces images. Il peut alors tout faire ces opérations mathématiques basées

35
00:02:45,650 --> 00:02:52,010
sur ces valeurs, donc si nous faisons une convolution 2D sur une image en niveaux de gris, c'est

36
00:02:52,010 --> 00:02:55,189
essentiellement ce que nous faisons: nous avons notre noyau et nous le faisons glisser sur

37
00:02:55,189 --> 00:02:59,030
toute l'image, puis en fonction des caractéristiques que le noyau

38
00:02:59,030 --> 00:03:02,450
a apprises, il peut alors bien décider ce quil a détecté et ce quil peut dire à propos de

39
00:03:02,450 --> 00:03:06,829
ce quil a détecté. Dans ce cas-ci, car il passe sur les bords lumineux du

40
00:03:06,829 --> 00:03:10,849
huit, il peut se déclencher d'une manière spécifique et lorsque nous combinons un grand nombre de

41
00:03:10,849 --> 00:03:15,530
ces noyaux et de nombreuses couches différentes, alors nous pouvons avoir une bonne confiance que

42
00:03:15,530 --> 00:03:23,000
nous avons détecté un 8 dans cette image. Maintenant, passons aux images en couleur.

43
00:03:23,000 --> 00:03:27,139
Pour afficher les couleurs, nous avons trois de ces canaux, donc dans l'image en niveaux de gris

44
00:03:27,139 --> 00:03:32,269
nous n'avions que de du noir au blanc, mais maintenant nous avons cette représentation RVB: nous avons donc trois

45
00:03:32,269 --> 00:03:36,229
canaux représentant le rouge, le vert et le bleu.

46
00:03:36,229 --> 00:03:40,129
Lorsque nous avons une image, nous décidons de la quantité de rouge, de la quantité de vert et de la quantité de bleu

47
00:03:40,129 --> 00:03:43,909
que nous voulons pour chaque pixel. Rappelez-vous, c'est vraiment juste des ampoules sous

48
00:03:43,909 --> 00:03:48,680
le capot qui vont s'allumer et s'éteindre en fonction d'une certaine intensité.

49
00:03:48,680 --> 00:03:54,669
Ici nous avons ici la toute première

50
00:03:54,669 --> 00:03:58,639
Photo en couleur créée et celle-ci a été créée chimiquement, donc ils avaient différentes

51
00:03:58,639 --> 00:04:01,819
plaques qui réagiraient au rouge, dautres plaques qui réagirait au vert, puis au bleu,

52
00:04:01,819 --> 00:04:07,310
et ils les superposaient pour obtenir cette image riche finale. Maintenant, pour vous donner une

53
00:04:07,310 --> 00:04:15,290
idée de ce que je veux dire,

54
00:04:15,290 --> 00:04:23,870
voici une démonstration vraiment cool du RVB: regardons

55
00:04:23,870 --> 00:04:30,139
cette expérience, nous avons un ordinateur portable et la personne a pris une

56
00:04:30,139 --> 00:04:34,700
image RVB et l'a divisée en ses composants R V et B. Nous avons la composante rouge de

57
00:04:34,700 --> 00:04:37,440
la fleur, la composante verte de la fleur, et la composante bleue de la fleur. 

58
00:04:37,440 --> 00:04:42,360
Dans cette configuration très intelligente, il a pris ces boîtiers de CD

59
00:04:42,360 --> 00:04:46,740
et il va maintenant refléter le rouge, le vert et le bleu sur les boîtiers de CD.

60
00:04:46,740 --> 00:04:50,100
Ce qui va se passer, c'est que lorsqu'il tournera l'ordinateur, ces couleurs vont

61
00:04:50,100 --> 00:04:53,430
sadditionner et vous allez voir ce qui se passe: le rouge, le vert et le bleu s'additionnent

62
00:04:53,430 --> 00:04:57,390
et maintenant nous avons cette reconstruction de notre image complète.

63
00:04:57,390 --> 00:05:00,540
Cest juste une démonstration très nette de la façon dont le rouge, le

64
00:05:00,540 --> 00:05:05,760
vert et le bleu peuvent s'ajouter vous donner une image complète.

65
00:05:05,760 --> 00:05:09,480
Maintenant que nous avons vu quelques représentations d'images, regardons comment faire

66
00:05:09,480 --> 00:05:14,310
notre convolution 2D sur une image RVB parce que jusqu'à présent, les

67
00:05:14,310 --> 00:05:18,510
exemples de convolution que nous avons vus concernaient un seul canal ou une profondeur de un.

68
00:05:18,510 --> 00:05:24,780
Que faire si nous avons plusieurs canaux? En général, lorsque nous faisons une

69
00:05:24,780 --> 00:05:30,510
convolution 2D, nous traitons généralement un volume en entrée, ce qui signifie

70
00:05:30,510 --> 00:05:34,830
que chaque noyau sera également un volume. Nous avons ici notre image d'entrée,

71
00:05:34,830 --> 00:05:39,840
nous avons une largeur et une hauteur en pixels et un certain nombre de canaux,

72
00:05:39,840 --> 00:05:45,720
ou « profondeur », qui ici est de trois, pour nos R V B. Alors, notre noyau aura un volume de F

73
00:05:45,720 --> 00:05:49,320
par F qui est l'étendue spatiale de notre noyau, donc dans ce cas trois par trois,

74
00:05:49,320 --> 00:05:54,660
et nous aurons également une profondeur de trois. La carte topologique en sortie

75
00:05:54,660 --> 00:05:59,580
aura un volume de W_sortie par H_sortie que nous pouvons calculer en utilisant notre arithmétique, mais

76
00:05:59,580 --> 00:06:02,640
ce qui est vraiment intéressant, c'est qu'il n'aura qu'une profondeur d'un.

77
00:06:02,640 --> 00:06:07,440
Nous allons donc additionner toutes les sorties ensemble pour produire une

78
00:06:07,440 --> 00:06:12,210
seule carte topologique; décomposons cela en détails. La première chose que

79
00:06:12,210 --> 00:06:16,260
nous voulons faire, cest de séparer les entrées et nos noyaux par canal. Nous avons

80
00:06:16,260 --> 00:06:20,850
notre image RVB et nous les séparons tous les trois. Nous faisons la même chose avec

81
00:06:20,850 --> 00:06:25,500
notre noyau, donc nous déclarons notre noyau puis nous les séparons par R V et B.

82
00:06:25,500 --> 00:06:28,680
Nous avons donc un noyau associé au canal rouge un noyau associé au

83
00:06:28,680 --> 00:06:33,960
canal vert et un noyau associé au canal bleu. Nous effectuons ensuite notre

84
00:06:33,960 --> 00:06:39,690
convolution 2D sur chaque canal, donc ce sont les convolutions que nous avons vues

85
00:06:39,690 --> 00:06:43,980
jusqu'à présent et ce sont les mêmes exemples que nous avons vu auparavant. Nous avons

86
00:06:43,980 --> 00:06:49,560
trois cartes topologiques qui sont créées. Ensuite, nous envoyons les résultats pour obtenir notre caractéristique W_sortie par

87
00:06:49,560 --> 00:06:54,330
H_sortie par un. Regardons une animation qui montre

88
00:06:54,330 --> 00:06:59,430
toute la procédure: nous avons nos canaux RVB, nous les séparons et maintenant nous

89
00:06:59,430 --> 00:07:04,229
effectuer notre convolution. Cette convolution est effectuée pour chaque carte topologique,

90
00:07:04,229 --> 00:07:08,520
donc dans un sens, le réseau doit apprendre pour chaque carte topologique

91
00:07:08,520 --> 00:07:13,940
sur quoi se concentrer, puis nous les additionnons.

92
00:07:15,259 --> 00:07:20,819
Pour créer de la profondeur, nous utilisons simplement plusieurs noyaux: nous avons ici nos

93
00:07:20,819 --> 00:07:24,590
Canaux RVB et maintenant nous pouvons déclarer plusieurs ensembles de noyaux. Dans cet exemple spécifique,

94
00:07:24,590 --> 00:07:29,520
nous utilisons quatre ensembles de noyaux, donc en utilisant quatre ensembles de noyaux,

95
00:07:29,520 --> 00:07:35,490
nous aurons maintenant une profondeur de quatre. Ceci est un concept très important, cest

96
00:07:35,490 --> 00:07:40,320
comment vous allez de volume à volume dans les réseaux de neurones convolutifs.

97
00:07:40,320 --> 00:07:43,889
Le cas général d'un réseau de neurones convolutifs est que vous avez une entrée en tant que

98
00:07:43,889 --> 00:07:49,710
volume et votre sortie est un volume. Maintenant, si nous continuons, nous avions une

99
00:07:49,710 --> 00:07:54,180
profondeur de 4. Eh bien maintenant, nous pouvons utiliser par exemple 8 noyaux et avoir une profondeur de 8

100
00:07:54,180 --> 00:07:57,690
Dans notre sortie. Vous pouvez imaginer comment vous pouvez obtenir cet ensemble très riche de

101
00:07:57,690 --> 00:08:01,889
représentations et il peut devenir très difficile de les interpréter à mesure que vous allez

102
00:08:01,889 --> 00:08:05,520
de plus en plus profond dans votre réseau. Encore une fois, l'idée est que vous voulez que

103
00:08:05,520 --> 00:08:09,030
votre réseau de neurones détermine les paramètres optimaux pour ces ensembles de

104
00:08:09,030 --> 00:08:16,590
noyaux. Maintenant, regardons un autre type d'opération qui est la

105
00:08:16,590 --> 00:08:23,430
convolution un par un. Une convolution un par un est très utile dans le contexte de la

106
00:08:23,430 --> 00:08:27,780
réduction des canaux: vous pouvez souvent arriver au point où vos

107
00:08:27,780 --> 00:08:31,560
volumes deviennent vraiment très importants, donc vous avez plusieurs canaux et vous voulez

108
00:08:31,560 --> 00:08:36,329
les réduire pour réduire la complexité de votre réseau. Généralement, la

109
00:08:36,329 --> 00:08:40,349
convolution un par un est utilisée et bien sûr, si vous utilisez une convolution un par un sur une

110
00:08:40,349 --> 00:08:45,029
profondeur de un, ce n'est pas nécessairement une opération utile,

111
00:08:45,029 --> 00:08:49,079
mais elle est très utile lorsque vous avez plusieurs canaux. Ici, le

112
00:08:49,079 --> 00:08:53,730
réseau peut apprendre comment, dans un sens, faire la moyenne de ces canaux ensemble pour

113
00:08:53,730 --> 00:08:58,410
réduire la taille de notre carte topologique. Ce qui est vraiment intéressant, c'est que parce que nous

114
00:08:58,410 --> 00:09:02,250
définissons cela comme une convolution un par un, nous pouvons ensuite ajouter

115
00:09:02,250 --> 00:09:07,560
des activations non linéaires: quand nous utilisons les convolutions un par un, nous pouvons ensuite

116
00:09:07,560 --> 00:09:11,490
ajouter un ReLU ou tanh après. Cela donne à notre

117
00:09:11,490 --> 00:09:15,570
réseau la possibilité d'avoir des représentations qui sont beaucoup plus

118
00:09:15,570 --> 00:09:19,550
compliquées que par exemple juste une moyenne.
